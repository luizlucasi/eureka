import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;

import java.util.List;

@XmlAccessorType(XmlAccessType.FIELD)
public class Struct {

    @XmlElement(name = "member")
    private List<Member> members;

    public List<Member> getMembers()
     Instant instant = Instant.ofEpochMilli(millis);
        LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());


 public static Map<String, Object> structTypeToMap(StructType struct) {
        Map<String, Object> map = new HashMap<>();
        if (struct != null && struct.getMembers() != null) {
            for (MemberType member : struct.getMembers()) {
                String key = member.getName();
                Value value = member.getValue();
                Object content = value.getContent();
                if (content instanceof StructType) {
                    map.put(key, structTypeToMap((StructType) content));
                } else if (content instanceof ArrayType) {
                    map.put(key, arrayTypeToList((ArrayType) content));
                } else {
                    map.put(key, content);
                }
            }
        }
        return map;
    }
    
    public static <T> List<T> arrayTypeToList(ArrayType array) {
        List<T> list = new ArrayList<>();
        if (array != null && array.getData() != null && array.getData().getValues() != null) {
            for (Value value : array.getData().getValues()) {
                Object content = value.getContent();
                if (content instanceof StructType) {
                    list.add((T) structTypeToMap((StructType) content));
                } else if (content instanceof ArrayType) {
                    list.add((T) arrayTypeToList((ArrayType) content));
                } else {
                    list.add((T) content);
                }
            }
        }
        return list;
    }
    
}




