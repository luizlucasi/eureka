
	@Test
	public void testStringValue() throws Exception {
		String xml = "<methodResponse><params><param><value><string>Hello, world!</string></value></param></params></methodResponse>";
		JAXBContext context = JAXBContext.newInstance(XmlRpcResponse.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
		XmlRpcResponse<String> response = (XmlRpcResponse<String>) unmarshaller.unmarshal(new StringReader(xml));
		assertEquals("Hello, world!", response.getValue());
	}

	@Test
	public void testIntValue() throws Exception {
		String xml = "<methodResponse><params><param><value><int>42</int></value></param></params></methodResponse>";
		JAXBContext context = JAXBContext.newInstance(XmlRpcResponse.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
		XmlRpcResponse<Integer> response = (XmlRpcResponse<Integer>) unmarshaller.unmarshal(new StringReader(xml));
		assertEquals(42, response.getValue());
	}

	@Test
	public void testBooleanValue() throws Exception {
		String xml = "<methodResponse><params><param><value><boolean>1</boolean></value></param></params></methodResponse>";
		JAXBContext context = JAXBContext.newInstance(XmlRpcResponse.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
		XmlRpcResponse<Boolean> response = (XmlRpcResponse<Boolean>) unmarshaller.unmarshal(new StringReader(xml));
		assertTrue(response.getValue());
	}

	@Test
	public void testStructValue() throws Exception {
		String xml = "<methodResponse><params><param><value><struct><member><name>foo</name><value><string>bar</string></value></member></struct></value></param></params></methodResponse>";
		JAXBContext context = JAXBContext.newInstance(XmlRpcResponse.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
		XmlRpcResponse<Map.Entry<?, ?>[]> response = (XmlRpcResponse<Map.Entry<?, ?>[]>) unmarshaller.unmarshal(new StringReader(xml));
		Map<String, String> map = Arrays.stream(response.getValue())
				.collect(Collectors.toMap(
						entry -> entry.getKey().toString(),
						entry -> entry.getValue().toString()
				));
		assertEquals("bar", map.get("foo"));
	}

	@Test
	public void testArrayValue() throws Exception {
		String xml = "<methodResponse><params><param><value><array><data><value><string>foo</string></value><value><string>bar</string></value></data></array></value></param></params></methodResponse>";
		JAXBContext context = JAXBContext.newInstance(XmlRpcResponse.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
		XmlRpcResponse<String[]> response = (XmlRpcResponse<String[]>) unmarshaller.unmarshal(new StringReader(xml));
		String[] expected = {"foo", "bar"};
		Object[] result = response.getValue();
		String[] stringResult = Arrays.stream(result).map(Object::toString).toArray(String[]::new);

		assertArrayEquals(expected, stringResult);

	}

	@Test
	@DisplayName("Testa response de erro com Struct")
	public void testErrorStructResponse() throws Exception {
		String xml = "<methodResponse><fault><value><struct><member><name>faultCode</name><value><int>500</int></value></member><member><name>faultString</name><value><string>Internal Server Error</string></value></member></struct></value></fault></methodResponse>";
		JAXBContext context = JAXBContext.newInstance(XmlRpcResponse.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
		XmlRpcResponse<Map.Entry<?, ?>[]> response = (XmlRpcResponse<Map.Entry<?, ?>[]>) unmarshaller.unmarshal(new StringReader(xml));
		Map<String, String> map = Arrays.stream(response.getValue())
				.collect(Collectors.toMap(
						entry -> entry.getKey().toString(),
						entry -> entry.getValue().toString()
				));

		assertEquals("500", map.get("faultCode"));
		assertEquals("Internal Server Error", map.get("faultString"));
	}
